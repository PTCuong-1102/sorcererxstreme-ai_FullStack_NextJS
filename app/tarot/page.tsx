
'use client';

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Sparkles, Shuffle, Eye, HelpCircle, RotateCcw, Heart } from 'lucide-react';
import { Sidebar } from '@/components/layout/Sidebar';
import { useAuthStore, useProfileStore } from '@/lib/store';
import { Button } from '@/components/ui/Button';
import { LoadingSpinner } from '@/components/ui/LoadingSpinner';
import { TarotSceneNew } from '@/components/tarot/TarotSceneNew';
import { CardReveal3DNew } from '@/components/tarot/CardReveal3DNew';
import toast from 'react-hot-toast';
import { FormattedContent } from '@/components/ui/FormattedContent';

const tarotCards = [
  { id: 1, name: 'The Fool', meaning: 'New beginnings, adventure, unlimited potential', description: 'You are stepping into a new journey full of potential' },
  { id: 2, name: 'The Magician', meaning: 'Willpower, creativity, achieving goals', description: 'You have everything you need to succeed' },
  { id: 3, name: 'The High Priestess', meaning: 'Intuition, mystery, subconscious knowledge', description: 'Trust your intuition and inner wisdom' },
  { id: 4, name: 'The Empress', meaning: 'Nurturing, creativity, abundance', description: 'A time of creativity and growth' },
  { id: 5, name: 'The Emperor', meaning: 'Authority, control, structure', description: 'Need discipline and organization in life' },
  { id: 6, name: 'The Hierophant', meaning: 'Tradition, spiritual education, guidance', description: 'Seek guidance from experienced mentors' },
  { id: 7, name: 'The Lovers', meaning: 'Love, choices, harmony', description: 'An important decision about relationships is coming' },
  { id: 8, name: 'The Chariot', meaning: 'Strong will, success, control', description: 'Success achieved through determination and effort' },
  { id: 9, name: 'Strength', meaning: 'Inner strength, courage, patience', description: 'True strength comes from within you' },
  { id: 10, name: 'The Hermit', meaning: 'Soul searching, wisdom, guidance', description: 'Time for reflection and seeking inner truth' },
  { id: 11, name: 'Wheel of Fortune', meaning: 'Luck, change, cycles', description: 'The wheel of destiny is turning, change is coming' },
  { id: 12, name: 'Justice', meaning: 'Fairness, balance, right decisions', description: 'Justice and balance will be restored' },
  { id: 13, name: 'The Hanged Man', meaning: 'Sacrifice, patience, new perspective', description: 'Need to change perspective to find solutions' },
  { id: 14, name: 'Death', meaning: 'Ending, transformation, rebirth', description: 'One phase ends to begin something new' },
  { id: 15, name: 'Temperance', meaning: 'Balance, harmony, patience', description: 'Need patience and balance in everything' },
  { id: 16, name: 'The Devil', meaning: 'Temptation, bondage, liberation', description: 'Recognize what is binding you' },
  { id: 17, name: 'The Tower', meaning: 'Sudden change, enlightenment, breaking down', description: 'Sudden change will bring enlightenment' },
  { id: 18, name: 'The Star', meaning: 'Hope, inspiration, healing', description: 'Hope and inspiration are coming to you' },
  { id: 19, name: 'The Moon', meaning: 'Illusion, intuition, uncertainty', description: 'Trust your intuition in uncertain times' },
  { id: 20, name: 'The Sun', meaning: 'Joy, success, energy', description: 'Success and joy shine brightly ahead' },
  { id: 21, name: 'Judgement', meaning: 'Rebirth, awakening, final decision', description: 'Time to reassess and make important decisions' },
  { id: 22, name: 'The World', meaning: 'Completion, achievement, fulfillment', description: 'You have achieved completion in some area' }
];

type Mode = 'overview' | 'question' | 'love';
type Phase = 'select_mode' | 'spread_cards' | 'pick_cards' | 'reading';

export default function TarotPage() {
  const [mode, setMode] = useState<Mode>('overview');
  const [phase, setPhase] = useState<Phase>('select_mode');
  const [question, setQuestion] = useState('');
  const [spreadCards, setSpreadCards] = useState<any[]>([]);
  const [selectedCards, setSelectedCards] = useState<any[]>([]);
  const [pickedPositions, setPickedPositions] = useState<number[]>([]);
  const [isAnimating, setIsAnimating] = useState(false);
  const [reading, setReading] = useState('');
  const [showLoveConfirmDialog, setShowLoveConfirmDialog] = useState(false);
  const [proceedWithGeneralLove, setProceedWithGeneralLove] = useState(false);
  const { user, isAuthenticated } = useAuthStore();
  const { partner, breakupData } = useProfileStore();

  const startReading = async () => {
    if (mode === 'love' && !partner && !breakupData?.isActive && !proceedWithGeneralLove) {
      handleLoveAnalysis();
      return;
    }

    if (mode === 'question' && !question.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n');
      return;
    }

    setIsAnimating(true);
    setPhase('spread_cards');

    const shuffled = [...tarotCards].sort(() => 0.5 - Math.random());

    await new Promise(resolve => setTimeout(resolve, 1500));

    setSpreadCards(shuffled.slice(0, 6));
    setIsAnimating(false);
    setPhase('pick_cards');
    toast.success('H√£y ch·ªçn nh·ªØng l√° b√†i theo tr·ª±c gi√°c c·ªßa b·∫°n!');
  };

  const handleLoveAnalysis = () => {
    if (!partner && !breakupData?.isActive && !proceedWithGeneralLove) {
      setShowLoveConfirmDialog(true);
      return;
    }

    startReading();
  };

  const confirmGeneralLoveAnalysis = () => {
    setProceedWithGeneralLove(true);
    setShowLoveConfirmDialog(false);
    startReading();
  };

  const generateGeneralLoveAnalysis = () => {
    if (!partner && !breakupData?.isActive && proceedWithGeneralLove) {
      return `üí´ **PH√ÇN T√çCH T√åNH DUY√äN T·ªîNG QUAN QUA TAROT**\n\nC√°c l√° b√†i ${selectedCards.map(c => c.name).join(', ')} ƒë√£ ƒë∆∞·ª£c ch·ªçn kh√¥ng ph·∫£i ng·∫´u nhi√™n. ƒê√¢y l√† th√¥ng ƒëi·ªáp t·ª´ v≈© tr·ª• v·ªÅ h√†nh tr√¨nh t√¨nh c·∫£m c·ªßa b·∫°n.\n\nüåπ **T√¨nh tr·∫°ng t√¨nh c·∫£m hi·ªán t·∫°i:**\nB·∫°n ƒëang trong giai ƒëo·∫°n chu·∫©n b·ªã ƒë√≥n nh·∫≠n t√¨nh y√™u. C√°c l√° b√†i cho th·∫•y tr√°i tim b·∫°n ƒë√£ s·∫µn s√†ng m·ªü ra cho nh·ªØng tr·∫£i nghi·ªám m·ªõi.\n\nüå∏ **Di·ªÖn bi·∫øn t√¨nh duy√™n nh·ªØng th√°ng t·ªõi:**\n\nüíù **Th√°ng ${new Date().getMonth() + 2}:** C√≥ th·ªÉ c√≥ cu·ªôc g·∫∑p g·ª° ƒë·∫∑c bi·ªát. H√£y ch√∫ √Ω ƒë·∫øn nh·ªØng d·∫•u hi·ªáu t·ª´ v≈© tr·ª•.\n\nüíï **Th√°ng ${new Date().getMonth() + 3}:** Th·ªùi k·ª≥ ph√°t tri·ªÉn t√¨nh c·∫£m m·∫°nh m·∫Ω. N·∫øu c√≥ ai ƒë√≥ trong l√≤ng, ƒë√¢y l√† l√∫c ƒë·ªÉ b√†y t·ªè.\n\nüíñ **Th√°ng ${new Date().getMonth() + 4}:** C·∫ßn ki√™n nh·∫´n v√† tin t∆∞·ªüng. T√¨nh y√™u ƒë√≠ch th·ª±c ƒëang tr√™n ƒë∆∞·ªùng ƒë·∫øn.\n\nüéØ **Th√¥ng ƒëi·ªáp t·ª´ c√°c l√° b√†i:**\n${selectedCards.map((card, index) => 
        `‚Ä¢ **${card.name}:** ${card.description}`
      ).join('\n')}\n\nüí´ **L·ªùi khuy√™n cho t√¨nh y√™u:**\n‚Ä¢ H√£y tin t∆∞·ªüng v√†o tr·ª±c gi√°c khi ch·ªçn ng∆∞·ªùi y√™u\n‚Ä¢ Tham gia nhi·ªÅu ho·∫°t ƒë·ªông ƒë·ªÉ m·ªü r·ªông m·ªëi quan h·ªá\n‚Ä¢ ƒê·ª´ng qu√° kh·∫Øt khe v·ªõi ti√™u chu·∫©n, cho t√¨nh y√™u c∆° h·ªôi\n‚Ä¢ Y√™u th∆∞∆°ng b·∫£n th√¢n tr∆∞·ªõc khi y√™u ng∆∞·ªùi kh√°c\n\n‚ú® C√°c l√° b√†i kh·∫≥ng ƒë·ªãnh r·∫±ng t√¨nh y√™u s·∫Ω ƒë·∫øn v·ªõi b·∫°n ƒë√∫ng th·ªùi ƒëi·ªÉm!`;
    }

    return generateLoveAnalysis();
  };

  const pickCard = async (cardIndex: number, card: any) => {
    if (pickedPositions.includes(cardIndex)) return;

    const newPickedPositions = [...pickedPositions, cardIndex];
    const newSelectedCards = [...selectedCards, card];

    setPickedPositions(newPickedPositions);
    setSelectedCards(newSelectedCards);

    const maxCards = mode === 'overview' ? 3 : mode === 'love' ? 3 : 1;

    if (newSelectedCards.length === maxCards) {
      setIsAnimating(true);
      await new Promise(resolve => setTimeout(resolve, 1000));

      generateReading(newSelectedCards);
      setPhase('reading');
      setIsAnimating(false);
    }
  };

  const generateReading = async (cards: any[]) => {
    const { token } = useAuthStore.getState();
    if (!token) {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem b√†i');
      return;
    }

    try {
      const userContext = {
        name: user?.name,
        hasPartner: !!partner,
        isInBreakup: !!breakupData?.isActive,
        partnerName: partner?.name || breakupData?.partnerName,
        partnerData: partner ? {
          name: partner.name,
          birthDate: partner.birthDate,
          birthTime: partner.birthTime,
          birthPlace: partner.birthPlace,
          relationship: partner.relationship,
          startDate: partner.startDate
        } : undefined,
        breakupData: breakupData?.isActive ? {
          partnerName: breakupData.partnerName,
          breakupDate: breakupData.breakupDate,
          autoDeleteDate: breakupData.autoDeleteDate
        } : undefined
      };

      const response = await fetch('/api/tarot/reading', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          question,
          cardsDrawn: cards.map((c) => c.name),
          mode,
          userContext
        }),
      });

      if (response.ok) {
        const { interpretation } = await response.json();
        setReading(interpretation);
      } else {
        toast.error('Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c di·ªÖn gi·∫£i t·ª´ AI');
      }
    } catch (error) {
      console.error(error);
      toast.error('C√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI');
    }
  };

  const generateLoveAnalysis = () => {
    if (!partner && !breakupData?.isActive) {
      return "B·∫°n hi·ªán kh√¥ng c√≥ ng∆∞·ªùi ph·ª• thu·ªôc v·ªÅ m·∫∑t t√¨nh c·∫£m. N·∫øu b·∫°n v·∫´n mu·ªën ti·∫øp t·ª•c th√¨ ch√∫ng t√¥i s·∫Ω ph√¢n t√≠ch chung v·ªÅ m·∫∑t t√¨nh c·∫£m c·ªßa b·∫°n m·ªôt c√°ch t·ªïng quan v√† di·ªÖn bi·∫øn trong nh·ªØng th√°ng t·ªõi.";
    }

    if (breakupData?.isActive) {
      return `B·∫°n ƒëang trong giai ƒëo·∫°n h·ªìi ph·ª•c sau khi chia tay v·ªõi ${breakupData.partnerName}. C√°c l√° b√†i cho th·∫•y ƒë√¢y l√† th·ªùi ƒëi·ªÉm ƒë·ªÉ t·ª± chƒÉm s√≥c b·∫£n th√¢n v√† l·∫Øng nghe nh·ªØng g√¨ tr√°i tim th·ª±c s·ª± c·∫ßn. H√£y ki√™n nh·∫´n, th·ªùi gian s·∫Ω ch·ªØa l√†nh m·ªçi t·ªïn th∆∞∆°ng.`;
    }

    return `V·ªÅ m·ªëi quan h·ªá v·ªõi ${partner?.name}, c√°c l√° b√†i ch·ªâ ra ƒë√¢y l√† giai ƒëo·∫°n quan tr·ªçng trong cu·ªôc s·ªëng t√¨nh c·∫£m c·ªßa b·∫°n. S·ª± hi·ªÉu bi·∫øt v√† giao ti·∫øp s·∫Ω l√† ch√¨a kh√≥a ƒë·ªÉ ph√°t tri·ªÉn m·ªëi quan h·ªá b·ªÅn v·ªØng.`;
  };

  const resetReading = () => {
    setPhase('select_mode');
    setSelectedCards([]);
    setSpreadCards([]);
    setPickedPositions([]);
    setReading('');
    setQuestion('');
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="flex h-screen bg-gray-950" style={{ fontFamily: 'Be Vietnam Pro, sans-serif' }}>
      <Sidebar />

      <main className="flex-1 overflow-auto">
        <div className="p-8">
          <div className="max-w-7xl mx-auto">
            {/* Header */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center mb-8"
            >
              <div className="w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-purple-600 to-purple-700 rounded-full flex items-center justify-center shadow-lg">
                <Sparkles className="w-8 h-8 text-white" />
              </div>
              <h1 className="text-3xl font-bold text-white mb-2">Tarot Huy·ªÅn B√≠ 3D</h1>
              <p className="text-gray-400">Kh√°m ph√° t∆∞∆°ng lai qua nh·ªØng l√° b√†i thi√™ng li√™ng</p>
            </motion.div>

            {/* Phase: Select Mode */}
            {phase === 'select_mode' && (
              <>
                {/* Mode Selection */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="flex justify-center mb-8"
                >
                  <div className="bg-gray-800/60 backdrop-blur-xl rounded-xl p-1 border border-gray-700/30">
                    <button
                      onClick={() => setMode('overview')}
                      className={`px-6 py-3 rounded-lg text-sm font-medium transition-all cursor-pointer whitespace-nowrap ${mode === 'overview' ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white shadow-lg' : 'text-gray-400 hover:text-white'}`}
                    >
                      <Eye className="w-4 h-4 inline mr-2" />
                      T·ªïng quan (3 l√°)
                    </button>
                    <button
                      onClick={() => setMode('question')}
                      className={`px-6 py-3 rounded-lg text-sm font-medium transition-all cursor-pointer whitespace-nowrap ${mode === 'question' ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white shadow-lg' : 'text-gray-400 hover:text-white'}`}
                    >
                      <HelpCircle className="w-4 h-4 inline mr-2" />
                      H·ªèi ƒë√°p (1 l√°)
                    </button>
                    <button
                      onClick={() => setMode('love')}
                      className={`px-6 py-3 rounded-lg text-sm font-medium transition-all cursor-pointer whitespace-nowrap ${mode === 'love' ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white shadow-lg' : 'text-gray-400 hover:text-white'}`}
                    >
                      <Heart className="w-4 h-4 inline mr-2" />
                      T√¨nh duy√™n (3 l√°)
                    </button>
                  </div>
                </motion.div>

                {/* Question Input */}
                <AnimatePresence>
                  {mode === 'question' && (
                    <motion.div
                      initial={{ opacity: 0, height: 0 }}
                      animate={{ opacity: 1, height: 'auto' }}
                      exit={{ opacity: 0, height: 0 }}
                      className="mb-8"
                    >
                      <div className="max-w-2xl mx-auto">
                        <div className="bg-gray-800/60 backdrop-blur-xl rounded-2xl p-6 border border-gray-700/30">
                          <h3 className="text-lg font-bold text-white mb-4">C√¢u h·ªèi c·ªßa b·∫°n</h3>
                          <textarea
                            value={question}
                            onChange={(e) => setQuestion(e.target.value)}
                            placeholder="Nh·∫≠p c√¢u h·ªèi b·∫°n mu·ªën ƒë∆∞·ª£c gi·∫£i ƒë√°p..."
                            className="w-full h-32 px-4 py-3 bg-gray-900/50 border border-gray-600/50 rounded-xl text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-purple-500/50 transition-all resize-none"
                            maxLength={500}
                          />
                          <p className="text-xs text-gray-500 mt-2">{question.length}/500 k√Ω t·ª±</p>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>

                {/* Start Reading Button */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  className="text-center mb-8"
                >
                  <Button
                    onClick={startReading}
                    disabled={isAnimating}
                    className="px-8 py-4 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-lg font-medium whitespace-nowrap"
                  >
                    {isAnimating ? (
                      <>
                        <LoadingSpinner size="sm" className="mr-2" />
                        ƒêang tr·∫£i b√†i...
                      </>
                    ) : (
                      <>
                        <Sparkles className="w-5 h-5 mr-2" />
                        B·∫Øt ƒë·∫ßu xem b√†i
                      </>
                    )}
                  </Button>
                </motion.div>
              </>
            )}

            {/* Phase: Cards Spread */}
            {phase === 'spread_cards' && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-20"
              >
                <LoadingSpinner size="lg" text="ƒêang tr·∫£i b√†i l√™n b√†n..." />
              </motion.div>
            )}

            {/* Phase: Pick Cards - 3D Scene */}
            {phase === 'pick_cards' && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-8"
              >
                <div className="text-center mb-6">
                  <h3 className="text-xl font-bold text-white mb-2">
                    {mode === 'overview' ? `Ch·ªçn 3 l√° b√†i (${selectedCards.length}/3)` : mode === 'love' ? `Ch·ªçn 3 l√° b√†i (${selectedCards.length}/3)` : `Ch·ªçn 1 l√° b√†i (${selectedCards.length}/1)`}
                  </h3>
                  <p className="text-gray-400">Theo tr·ª±c gi√°c v√† ch·ªçn nh·ªØng l√° b√†i g·ªçi t√™n b·∫°n</p>
                </div>

                {/* New 3D Tarot Scene */}
                <TarotSceneNew
                  cards={spreadCards}
                  selectedCards={selectedCards}
                  pickedPositions={pickedPositions}
                  onCardClick={pickCard}
                  isSelectable={true}
                  phase={phase}
                />

                {/* Selected Cards Preview */}
                {selectedCards.length > 0 && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-8 text-center"
                  >
                    <h4 className="text-lg font-semibold text-white mb-4">L√° b√†i ƒë√£ ch·ªçn:</h4>
                    <div className="flex flex-wrap justify-center gap-4">
                      {selectedCards.map((card, index) => (
                        <motion.div
                          key={card.id}
                          initial={{ scale: 0, rotateY: 180 }}
                          animate={{ scale: 1, rotateY: 0 }}
                          transition={{ delay: index * 0.2 }}
                          className="bg-gray-800/60 backdrop-blur-xl rounded-xl p-4 border border-gray-700/30 min-w-[140px]"
                        >
                          <div className="w-16 h-16 mx-auto mb-3 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                            <Sparkles className="w-8 h-8 text-white" />
                          </div>
                          <p className="text-sm font-medium text-white text-center">{card.name}</p>
                        </motion.div>
                      ))}
                    </div>
                  </motion.div>
                )}
              </motion.div>
            )}

            {/* Phase: Reading Results with 3D Cards */}
            {phase === 'reading' && reading && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="max-w-6xl mx-auto"
              >
                {/* New 3D Card Reveal */}
                <div className="mb-8">
                  <CardReveal3DNew cards={selectedCards} mode={mode} />
                </div>

                <div className="bg-gray-800/60 backdrop-blur-xl rounded-2xl p-8 border border-gray-700/30 shadow-lg">
                  <div className="text-center mb-6">
                    <Sparkles className="w-12 h-12 mx-auto mb-4 text-purple-400" />
                    <h3 className="text-2xl font-bold text-white">
                      {mode === 'overview' ? 'K·∫øt Qu·∫£ Xem B√†i T·ªïng Quan' : mode === 'love' ? 'K·∫øt Qu·∫£ Xem B√†i T√¨nh Duy√™n' : 'C√¢u Tr·∫£ L·ªùi T·ª´ Tarot'}
                    </h3>
                  </div>

                  {mode === 'love' ? (
                    <div className="space-y-6">
                      <div className="text-center">
                        <h4 className="text-xl font-bold text-pink-400 mb-2">Ph√¢n t√≠ch t√¨nh duy√™n chi ti·∫øt</h4>
                        <p className="text-gray-400">L√° b√†i ƒë√£ ch·ªçn: {selectedCards.map(c => c.name).join(', ')}</p>
                      </div>

                      <div className="bg-gray-900/30 rounded-xl p-6">
                        <h5 className="text-lg font-semibold text-white mb-3 flex items-center">
                          <div className="text-xl mr-2">üíï</div>
                          Ph√¢n t√≠ch t√¨nh duy√™n t·ª´ AI
                        </h5>
                        <FormattedContent 
                          content={reading} 
                          className="text-gray-300 leading-relaxed" 
                        />
                      </div>

                      <div className="bg-gradient-to-r from-pink-600/20 to-red-600/20 rounded-xl p-6 border border-pink-500/30">
                        <h5 className="text-lg font-semibold text-pink-300 mb-3 flex items-center">
                          <div className="text-xl mr-2">üíñ</div>
                          L·ªùi khuy√™n cho t√¨nh y√™u
                        </h5>
                        <p className="text-pink-100 leading-relaxed">
                          {breakupData?.isActive
                            ? "H√£y d√†nh th·ªùi gian ƒë·ªÉ ch·ªØa l√†nh v√† t√¨m l·∫°i ch√≠nh m√¨nh. T√¨nh y√™u ƒë√≠ch th·ª±c s·∫Ω ƒë·∫øn khi b·∫°n s·∫µn s√†ng."
                            : partner
                            ? "H√£y tr√¢n tr·ªçng m·ªëi quan h·ªá hi·ªán t·∫°i v√† kh√¥ng ng·ª´ng c·ªë g·∫Øng hi·ªÉu nhau h∆°n. Ki√™n nh·∫´n v√† khoan dung l√† ch√¨a kh√≥a."
                            : "H√£y m·ªü l√≤ng ƒë·ªÉ ƒë√≥n nh·∫≠n t√¨nh y√™u. Khi b·∫°n y√™u th∆∞∆°ng b·∫£n th√¢n, b·∫°n s·∫Ω thu h√∫t nh·ªØng ƒëi·ªÅu t·ªët ƒë·∫πp."}
                        </p>
                      </div>
                    </div>
                  ) : mode === 'overview' ? (
                    <div className="space-y-6">
                      <div className="text-center">
                        <h4 className="text-xl font-bold text-purple-400 mb-2">K·∫øt qu·∫£ xem b√†i Tarot t·ªïng quan</h4>
                        <p className="text-gray-400">L√° b√†i ƒë√£ ch·ªçn: {selectedCards.map(c => c.name).join(', ')}</p>
                      </div>

                      <div className="bg-gray-900/30 rounded-xl p-6">
                        <h5 className="text-lg font-semibold text-white mb-3 flex items-center">
                          <div className="text-xl mr-2">üîÆ</div>
                          Ph√¢n t√≠ch t·ª´ AI Master Tarot
                        </h5>
                        <FormattedContent 
                          content={reading} 
                          className="text-gray-300 leading-relaxed" 
                        />
                      </div>

                      <div className="bg-pink-600/10 rounded-xl p-6 border border-pink-500/20">
                        <h5 className="text-lg font-semibold text-pink-300 mb-3 flex items-center">
                          <div className="text-xl mr-2">üíï</div>
                          G√≥c nh√¨n t√¨nh duy√™n
                        </h5>
                        <FormattedContent 
                          content={generateGeneralLoveAnalysis()} 
                          className="text-pink-200 leading-relaxed" 
                        />
                      </div>

                      <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-xl p-6 border border-purple-500/30">
                        <h5 className="text-lg font-semibold text-purple-300 mb-3 flex items-center">
                          <div className="text-xl mr-2">‚ú®</div>
                          L·ªùi khuy√™n t·ª´ Tarot
                        </h5>
                        <p className="text-purple-100 leading-relaxed">
                          H√£y tin t∆∞·ªüng v√†o tr·ª±c gi√°c v√† ƒë·ª´ng s·ª£ ƒë·ªëi m·∫∑t v·ªõi nh·ªØng thay ƒë·ªïi c·∫ßn thi·∫øt. M·ªói l√° b√†i b·∫°n ch·ªçn ƒë·ªÅu mang th√¥ng ƒëi·ªáp ri√™ng, h√£y l·∫Øng nghe ti·∫øng n√≥i b√™n trong.
                        </p>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-6">
                      <div className="text-center">
                        <h4 className="text-xl font-bold text-purple-400 mb-2">K·∫øt qu·∫£ xem b√†i cho c√¢u h·ªèi c·ªßa b·∫°n</h4>
                        <div className="bg-gray-900/50 rounded-xl p-4 mb-4">
                          <p className="text-yellow-300 font-medium">{`"${question}"`}</p>
                        </div>
                        <p className="text-gray-400">L√° b√†i ƒë√£ ch·ªçn: {selectedCards[0].name}</p>
                      </div>

                      <div className="bg-gray-900/30 rounded-xl p-6">
                        <h5 className="text-lg font-semibold text-white mb-3 flex items-center">
                          <div className="text-xl mr-2">üîÆ</div>
                          Ph√¢n t√≠ch t·ª´ AI Master Tarot
                        </h5>
                        <FormattedContent 
                          content={reading} 
                          className="text-gray-300 leading-relaxed" 
                        />
                      </div>

                      <div className="bg-gray-900/30 rounded-xl p-6">
                        <h5 className="text-lg font-semibold text-white mb-3 flex items-center">
                          <div className="text-xl mr-2">üí°</div>
                          L·ªùi khuy√™n c·ª• th·ªÉ
                        </h5>
                        <p className="text-gray-300 leading-relaxed">
                          {selectedCards[0].meaning}. H√£y tin t∆∞·ªüng v√†o s·ª± l·ª±a ch·ªçn c·ªßa m√¨nh v√† √°p d·ª•ng th√¥ng ƒëi·ªáp n√†y v√†o t√¨nh hu·ªëng hi·ªán t·∫°i.
                        </p>
                      </div>

                      <div className="bg-pink-600/10 rounded-xl p-6 border border-pink-500/20">
                        <h5 className="text-lg font-semibold text-pink-300 mb-3 flex items-center">
                          <div className="text-xl mr-2">üíï</div>
                          Li√™n quan ƒë·∫øn t√¨nh duy√™n
                        </h5>
                        <FormattedContent 
                          content={generateGeneralLoveAnalysis()} 
                          className="text-pink-200 leading-relaxed" 
                        />
                      </div>

                      <div className="bg-gradient-to-r from-purple-600/20 to-pink-600/20 rounded-xl p-6 border border-purple-500/30">
                        <h5 className="text-lg font-semibold text-purple-300 mb-3 flex items-center">
                          <div className="text-xl mr-2">üåü</div>
                          K·∫øt lu·∫≠n
                        </h5>
                        <p className="text-purple-100 leading-relaxed">
                          L√° b√†i b·∫°n ch·ªçn kh√¥ng ph·∫£i ng·∫´u nhi√™n. H√£y tin r·∫±ng v≈© tr·ª• ƒë√£ d·∫´n d·∫Øt b·∫°n ƒë·∫øn th√¥ng ƒëi·ªáp n√†y v√†o ƒë√∫ng th·ªùi ƒëi·ªÉm.
                        </p>
                      </div>
                    </div>
                  )}

                  <div className="flex justify-center mt-8">
                    <Button
                      onClick={resetReading}
                      variant="secondary"
                      className="whitespace-nowrap"
                    >
                      <RotateCcw className="w-4 h-4 mr-2" />
                      Xem b√†i m·ªõi
                    </Button>
                  </div>
                </div>
              </motion.div>
            )}

            {/* Love Confirmation Dialog */}
            <AnimatePresence>
              {showLoveConfirmDialog && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50"
                  onClick={() => setShowLoveConfirmDialog(false)}
                >
                  <motion.div
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    exit={{ scale: 0.9, opacity: 0 }}
                    className="bg-gray-800 rounded-2xl p-8 max-w-md mx-4 border border-gray-700"
                    onClick={(e) => e.stopPropagation()}
                  >
                    <div className="text-center">
                      <Heart className="w-12 h-12 mx-auto mb-4 text-pink-400" />
                      <h3 className="text-xl font-bold text-white mb-4">Th√¥ng b√°o</h3>
                      <p className="text-gray-300 mb-6 leading-relaxed">
                        B·∫°n hi·ªán kh√¥ng c√≥ ng∆∞·ªùi ph·ª• thu·ªôc v·ªÅ m·∫∑t t√¨nh c·∫£m. N·∫øu b·∫°n v·∫´n mu·ªën ti·∫øp t·ª•c th√¨ ch√∫ng t√¥i s·∫Ω ph√¢n t√≠ch chung v·ªÅ m·∫∑t t√¨nh c·∫£m c·ªßa b·∫°n m·ªôt c√°ch t·ªïng quan v√† di·ªÖn bi·∫øn trong nh·ªØng th√°ng t·ªõi.
                      </p>
                      <div className="flex gap-4">
                        <Button
                          onClick={() => setShowLoveConfirmDialog(false)}
                          variant="secondary"
                          className="flex-1 whitespace-nowrap"
                        >
                          H·ªßy b·ªè
                        </Button>
                        <Button
                          onClick={confirmGeneralLoveAnalysis}
                          className="flex-1 bg-gradient-to-r from-pink-600 to-red-600 hover:from-pink-700 hover:to-red-700 whitespace-nowrap"
                        >
                          Ti·∫øp t·ª•c
                        </Button>
                      </div>
                    </div>
                  </motion.div>
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </div>
      </main>
    </div>
  );
}
